#!/bin/bash
set -e

COMMAND="$1"

case "$COMMAND" in
  "list")
    gh api /user/repository_invitations --template='{{ range . }}{{ printf "%.0f" .id }} {{ .repository.full_name }} ({{ .permissions }}){{ printf "\n" }}{{ end }}'
    ;;
  "accept")
    gh api -X PATCH "/user/repository_invitations/$2"
    ;;
  *)
    echo "Usage: gh invite <command>"
    echo
    echo "Commands:"
    echo "  list"
    echo "    List all pending invitations"
    echo "  accept <id>"
    echo "    Accept invite"
    ;;
esac
# Snippets to help get started:

# Determine if an executable is in the PATH
# if ! type -p ruby >/dev/null; then
#   echo "Ruby not found on the system" >&2
#   exit 1
# fi

# Pass arguments through to another command
# gh issue list "$@" -R cli/cli

# Using the gh api command to retrieve and format information
# QUERY='
#   query($endCursor: String) {
#     viewer {
#       repositories(first: 100, after: $endCursor) {
#         nodes {
#           nameWithOwner
#           stargazerCount
#         }
#       }
#     }
#   }
# '
# TEMPLATE='
#   {{- range $repo := .data.viewer.repositories.nodes -}}
#     {{- printf "name: %s - stargazers: %v\n" $repo.nameWithOwner $repo.stargazerCount -}}
#   {{- end -}}
# '
# exec gh api graphql -f query="${QUERY}" --paginate --template="${TEMPLATE}"
